---
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(lubridate)){install.packages('lubridate')}
if(!require(ggthemes)){install.packages('ggthemes')}
library(lubridate)
library(ggplot2)
library(ggthemes)
```

# QuickStart Data Science Bootcamp<br>Cohorts 3 and 4 - Jonathan Fowler

## Project 2 (R)

For this project, think of yourself as a developer on a corporate business intelligence team. You have been given a flat file (CSV format) of login information from Maximo, an asset tracking system the company relies on. Current licensing requires that no more than 95 users in the AUTHORIZED and/or LIMITED groups be online at any given time. The deliverables outlined in this project will be submitted to the IT director, who wants to be sure that the licensing threshold is not exceeded.

### The Data

The data is included in this project. The filename is **Project2Data.csv**.

| Field     | Description   |
|-----------|--------------|
| attemptdate        | Date and Time of event          |
| attemptresult | LOGIN, LOGOUT, TIMEOUT, or SYSLOGOUT |
| userid  | The user triggering the event |
| type      | User type, i.e., AUTHORIZED |
| maxsessionuid   | Unique identifer for a session. This will show up from LOGIN to LOGOUT, TIMEOUT, or SYSLOGOUT. |

### Part 1

Let's answer some basic questions about the dataset. You may insert your code below each of these lines.  

**Prework: Load the CSV file into your environment.**  
```{r}
  #Loading data into R
  pd <- read.csv("~/Quick Start/R/Project 2/Materials/Project2Data.csv")
```
**1. How many unique users? A simple number will do here, no tables or formatting needed.**  
```{r}
  #Creation of factor showing all unique user IDs
  uniqueusers <- unique(pd$userid)

  #Show's amount of unique user IDs
  length(uniqueusers)
```
**2. How many unique levels, unique users in each? I want a table that shows this information together.**  
```{r}
  #Subsets data from pd where user ID is unique
  pd_deduced <- pd[!duplicated(pd[c("userid")]),]

  #Shows how many entries from pd_deduced are in each type of account
  table(pd_deduced$type)
```
**3. What is the average session time for each unique group?**  
```{r}
  #Subsets data from pd where attempt result is login, timeout or logout into their own data frames
  login <- pd[pd$attemptresult=="LOGIN",]
  logout <- pd[pd$attemptresult=="LOGOUT",]
  timeout <- pd[pd$attemptresult=="TIMEOUT",]

  #Merges subsetted data from above data frames together
  one <- merge(login,logout,by=c("maxsessionuid","userid","type"),all.x=TRUE)
  final <- merge(one,timeout,by=c("maxsessionuid","userid","type"),all.x=TRUE)

  #Renaming columns in 'final' data frame created above
  names(final)[4] <- "login"
  names(final)[5] <- "event1"
  names(final)[6] <- "logout"
  names(final)[7] <- "event2"
  names(final)[8] <- "timeout"
  names(final)[9] <- "event3"

  #Taking necessary columns from 'final' data frame and adding them to created 'q3' data frame
  q3 <- data.frame(final$maxsessionuid,final$userid,final$type,
                 as_datetime(final$login),as_datetime(final$logout),
                 as_datetime(final$timeout))

  #Renaming columns in 'q3' data frame created above 
  names(q3)[1] <- "maxsessionuid"
  names(q3)[2] <- "userid"
  names(q3)[3] <- "type"
  names(q3)[4] <- "login"
  names(q3)[5] <- "logout"
  names(q3)[6] <- "timeout"
  
  head(q3)

  #Finds max time from time fields in q3 and adds them to q3 in new column 'max'
  x <- data.frame(as.numeric(as.POSIXct(q3$login)),as.numeric(as.POSIXct(q3$logout)),
                as.numeric(as.POSIXct(q3$timeout)))
  x[is.na(x)] <- 0
  q3$max <- as_datetime(apply(x,1,max))

  #Creates new column in q3 named 'diff' showing length of each session
  q3$diff <- difftime(q3$max,q3$login,units="hours")

  #Subsets data from q3 by type of user access
  q3auth <- q3[q3$type=="AUTHORIZED",]
  q3lim <- q3[q3$type=="LIMITED",]
  q3exp <- q3[q3$type=="EXPRESS",]

  #Finds average length of session for each type of user access
  a <- c(mean(q3auth$diff))
  b <- c(mean(q3lim$diff))
  c <- c(mean(q3exp$diff))

  #Assigns average for each user type to a vector
  AUTHORIZED <- c(paste(floor(a),round((a-floor(a))*60),sep=":"))
  LIMITED <- c(paste(floor(b),round((b-floor(b))*60),sep=":"))
  EXPRESS <- c(paste(floor(c),round((c-floor(c))*60),sep=":"))

  #Adds vectors created above to data frame showing average length of session for each user ID
  q3final <- data.frame(AUTHORIZED,LIMITED,EXPRESS)

  #Renames row in 'q3final' data frame
  row.names(q3final) <- "Average Length of Session"

  #Displays 'q3final' data frame
  q3final
```

### Part 2

Your objective in this part is to create a Gantt chart that shows the following:  
1. One unique userid per row <br>
2. A Gantt chart on the right <br>
3. Blocks of time representing when each user logged in, mapped on the time field <br>
4. User's time blocks colored by which group they belong to <br>

You're dealing with a lot of data, so a single chart that shows all users for the whole month would be impossible to read. How are you going to break this out into multiple, manageable charts? It's okay to produce a chart for each week in the month. Just show the code that creates all the charts. **If you determine a Gantt chart is not appropriate, show me the Gantt anyway and then explain why your changes make sense.**

```{r}
  #Subsets data from 'q3' data frame ordering data by login time
  q32 <- q3[order(login),]

  #Breaks out data from each week into it's own data frame
  p1 <- q32[1:6488,]
  p2 <- q32[6489:12112,]
  p3 <- q32[12113:18062,]
  p4 <- q32[18063:26459,]

  #Orders data from data frames created above by user ID
  p1a <- p1[order(p1$userid),]
  p2a <- p1[order(p2$userid),]
  p3a <- p1[order(p3$userid),]
  p4a <- p1[order(p4$userid),]

  #Takes necessary columns from data frames created above and adds them to a new data frame
  p1b <- data.frame(p1a$userid,p1a$type,p1a$maxsessionuid,p1a$login,p1a$max)
  p2b <- data.frame(p2a$userid,p2a$type,p2a$maxsessionuid,p2a$login,p2a$max)
  p3b <- data.frame(p3a$userid,p3a$type,p3a$maxsessionuid,p3a$login,p3a$max)
  p4b <- data.frame(p4a$userid,p4a$type,p4a$maxsessionuid,p4a$login,p4a$max)

  #Subsets data from 'p1b' data frame created above into manageable group of user IDs
  p1ba <- p1b[1:336,]

  #Creates Gantt chart for group of user IDs in 'p1ba' data frame showing session time and length
  ggplot(p1ba,aes(x=p1a.login,xend=p1a.max,y=p1a.userid,yend=p1a.userid,color=p1a.type)) +
    geom_segment(size=3) +
    labs(title="Week 1, Agent Group 1",x="Session Time/Length",y="User ID",color="Type") +
    theme_fivethirtyeight() +
    theme(axis.title=element_text())
```

After further review, the Gantt Chart model is not ideal for showing the amount of concurrent users over the month of March.  Below is the code creating a better representation.

```{r}
  #Creates factor showing every minute of activity in March
  interval <- seq(min(q3$login),max(q3$max),by="mins")

  #Creates logical factor showing how many users from each group were logged in each minute
  x_auth <- sapply(interval,function(int) sum(q3auth$login <= int & int <= q3auth$max))
  x_lim <- sapply(interval,function(int) sum(q3lim$login <= int & int <= q3lim$max))
  x_exp <- sapply(interval,function(int) sum(q3exp$login <= int & int <= q3exp$max))

  #Creates data frame from the above factors
  finalfinal <- data.frame(interval,x_auth,x_lim,x_exp)

  #Adds column to data frame adding together how many users from each group were logged in each minute
  finalfinal$total <- finalfinal$x_auth+finalfinal$x_lim+finalfinal$x_exp

  #Creates time series chart showing the number of concurrent users per minute
  ggplot(finalfinal) +
    geom_line(aes(x=interval,y=x_auth,color='AUTHORIZED')) +
    geom_line(aes(x=interval,y=x_exp,color='EXPRESS')) +
    geom_line(aes(x=interval,y=x_lim,color='LIMITED')) +
    geom_line(aes(x=interval,y=total,color='TOTAL')) +
    labs(title="Amount of Concurrent Users",x="Time",y="Number of Users",color='User Type') +
    scale_y_continuous(limits=c(0,100),breaks=seq(0,100,10),expand=c(0,0)) +
    theme_fivethirtyeight() +
    theme(axis.title=element_text())
```

### Part 3

This project required you to think critically about the request(s) you were given, clarify information from the customer, and work together as a team. In the section below, please write a short paragraph that answers the following questions: 
1. Did the Gantt chart request make sense? What was your process in determining how to show the data?<br>
2. What sort of cleaning did you have to do to the data? What data points did you remove and why?<br>
3. Did you find it difficult to ask the customer (me) clarifying questions?<br>
4. Did you take advantage of the student worksessions? How did those help you?<br>
5. How have you grown as a practitioner through the course of this project?<br>

```{r}
  #When I first saw the Gantt Chart request I thought it would be pretty simple.  I felt that way about all of the quesitons. However, upon getting into the project I realized I underestimated my skill set.  My process for deciding how to show the Gantt Chart was based on figuring out how much data I could fit in one chart and still have it be readable.  Thereby I decided to show the times a small group of users were logged in over a one week period.  I cleaned the data first by removing all instances where the attempt result was failed, restart, success or syslogout.  From there I did additional subsets and merges to get the cleaned data functioning the way I wanted it to.  Only once did I have a clarifying question to ask and I did not have any problems asking it.  I attended one of the student worksessions.  I didn't find it very helpful because it was over question 3, which I had already completed.  I did, however spend time going over the graphs and the techniques to create them with Gina which I couldn't have completed this project without.  I think over the course of this project I have gotten better at using google to learn how to solve coding problems, and of course I have learned new techniques in R.     
```

### Submissions

Because we all will be working with the same data, you will only need to send me an updated version of this Markdown file. Please save it as *lastname_firstinitial_Project2.Rmd* and email to me directly at [jonathan.fowler@quickstart.com](mailto:jonathan.fowler@quickstart.com). Submissions must be made by **May 22 2020 11:59PM ET**. 

### Resources 

#### Gantt charts

[https://www.statology.org/gantt-chart-r-ggplot2/](https://www.statology.org/gantt-chart-r-ggplot2/) <br>
[https://stats.andrewheiss.com/misc/gantt.html](https://stats.andrewheiss.com/misc/gantt.html) <br> 
[https://davetang.org/muse/2017/02/03/gantt-chart-using-r/](https://davetang.org/muse/2017/02/03/gantt-chart-using-r/) <br>
[https://datascienceplus.com/visualize-your-cvs-timeline-with-r-gantt-style/](https://datascienceplus.com/visualize-your-cvs-timeline-with-r-gantt-style/) <br>
[https://edwinth.github.io/blog/paletti/](https://edwinth.github.io/blog/paletti/)
[https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2](https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2)
[http://www.sthda.com/english/wiki/ggplot2-colors-how-to-change-colors-automatically-and-manually](http://www.sthda.com/english/wiki/ggplot2-colors-how-to-change-colors-automatically-and-manually)


#### R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
